#!/usr/bin/env python

import _init_paths
from fast_rcnn.config import cfg
from fast_rcnn.test import im_detect
from fast_rcnn.nms_wrapper import nms
from utils.timer import Timer
import numpy as np
import caffe, os, sys, cv2
import json
import time

class PyFasterRCNN(object):
    def __init__(self):
        self.NET_NAME = 'VGG16'
        #self.NET_NAME = 'ZF'
        self.NET_MODEL_NAME = self.NET_NAME+'_faster_rcnn_final.caffemodel'
        self.GPU_ID = 0
        self.prototxt = os.path.join(cfg.ROOT_DIR, 'models', self.NET_NAME, 'faster_rcnn_end2end', 'test.prototxt')
        self.caffemodel = os.path.join(cfg.ROOT_DIR, 'data', 'faster_rcnn_models', self.NET_MODEL_NAME)
        cfg.TEST.HAS_RPN = True
        self.CONF_THRESH = 0.2
        self.NMS_THRESH = 0.2
        self.classIndex = 1 # face's class index
        self.className = 'face' # we only have one class
        if not os.path.isfile(self.prototxt):
            raise IOError(('{:s} not found.').format(self.prototxt))
        if not os.path.isfile(self.caffemodel):
            raise IOError(('{:s} not found.').format(self.caffemodel))
        caffe.set_mode_gpu()
        caffe.set_device(self.GPU_ID)
        cfg.GPU_ID = self.GPU_ID
        self.net = caffe.Net(self.prototxt, self.caffemodel, caffe.TEST)
        print '\n\nLoaded network {:s}'.format(self.caffemodel)
        self.warmup()
        print ("Initialize complete!")
    
    def warmup(self):
        # Warmup on a dummy image
        im = 128 * np.ones((300, 500, 3), dtype=np.uint8)
        for i in xrange(2):
            _, _= im_detect(self.net, im)        

    def detect(self, imagePath):
        """Detect object classes in an image using pre-computed object proposals."""
        #print ("detect :%s" %imagePath)
        im = cv2.imread(imagePath)
        return self.detectRaw(im)

    def detectRaw(self, im):
        """Detect object classes in an image using pre-computed object proposals."""
        result = {}
        # Detect all object classes and regress object bounds
        timer = Timer()
        timer.tic()
        #print ("im_detect ")
        scores, boxes = im_detect(self.net, im)
        timer.toc()
        print ('Detection took {:.3f}s for {:d} object proposals').format(timer.total_time, boxes.shape[0])
        cls_boxes = boxes[:, 4*self.classIndex:4*(self.classIndex + 1)]
        cls_scores = scores[:, self.classIndex]
        dets = np.hstack((cls_boxes, cls_scores[:, np.newaxis])).astype(np.float32)
        keep = nms(dets, self.NMS_THRESH)
        dets = dets[keep, :]
        inds = np.where(dets[:, -1] >= self.CONF_THRESH)[0]
        result["status"]="ok"
        if len(inds) == 0:
            result["obj_num"]= 0
            result["objects"]=[]
            res = json.dumps(result) 
            return res
        boxes = []        
        for i in inds:
            bbox = dets[i, :4]
            score = dets[i, -1]
            x0,y0,x1,y1 = int(bbox[0]), int(bbox[1]), int(bbox[2]), int(bbox[3])
            obj = {}
            obj["score"] = str(score)
            obj["x"] = x0
            obj["y"] = y0
            obj["w"] = x1-x0
            obj["h"] = y1-y0
            boxes.append(obj)
        result["obj_num"] = len(boxes)
        result["objects"] = boxes
        res = json.dumps(result) 
        return res

if __name__ == '__main__':
    pyFasterRCNN = PyFasterRCNN()
    imagePath = "./test.jpg"
    for _ in range(10):
        s=time.time()
        result = pyFasterRCNN.detect(imagePath)
        print time.time()-s, result
